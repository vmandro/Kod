data class Quat(val a: Float, val b: Float, val c: Float, val d: Float)

val alpha = Quat(0f, 0f, 0f, 1f)
val beta = Quat(0f, 0.9119f, 0f, -0.4104f)
val gamma = Quat(0f, 1f, 0f, 0f)
val delta = Quat(0f, 0.48f, 0.6f, 0.64f)
val epsilon = Quat(0f, 0.197f, -0.8773f, 0.4377f)
val theta = Quat(0f, 0.36f, 0.48f, 0.8f)
val eta = Quat(0f, 0f, 1f, 0f)

val quats = listOf(
    Quat(0f, 0.50888333f, -0.54762138f, 0.66419017f),
    Quat(0f, 0.70476331f, 0.70476331f, -0.08134717f),
    Quat(0f, 0.8074712f, -0.46183711f, 0.36701056f),
    Quat(0f, 0.19439534f, 0.19439534f, -0.9614681f),
    Quat(0f, -0.57281989f, -0.57281989f, -0.58630601f),
    Quat(0f, 0.48296702f, 0.48296702f, -0.73040107f),
    Quat(0f, -0.88560167f, 0.45626122f, -0.0868066f),
    Quat(0f, 0.69100504f, 0.69100504f, 0.21218875f),
    Quat(0f, 0.6513594f, -0.5843112f, 0.48405718f),
    Quat(0f, 0.57553485f, 0.7213917f, -0.38516704f),
    Quat(0f, 0.95616822f, -0.29278113f, 0.00464053f),
    Quat(0f, -0.77057465f, 0.63609723f, 0.03993771f),
    Quat(0f, -0.8752936f, 0.24286905f, -0.41818148f),
    Quat(0f, 0.58855075f, 0.58855075f, -0.55427071f),
    Quat(0f, -0.52472692f, -0.52472692f, 0.67031584f),
    Quat(0f, 0.14707624f, -0.98911655f, -0.00412632f),
    Quat(0f, 0.62635059f, 0.67332607f, -0.39283196f),
    Quat(0f, -0.5126197f, 0.74751525f, 0.42242395f),
    Quat(0f, -0.70054766f, -0.70054766f, 0.13588952f),
    Quat(0f, -0.20737771f, -0.20737771f, -0.9560277f),
    Quat(0f, 0.29355469f, -0.82743201f, 0.47872947f),
    Quat(0f, 0.70373938f, 0.70373938f, -0.09747703f),
    Quat(0f, 0.33704295f, -0.65101256f, 0.68013579f),
    Quat(0f, 0.65920197f, -0.35260152f, -0.66417237f),
    Quat(0f, 0.39979792f, -0.61441023f, 0.68019239f),
    Quat(0f, -0.52648581f, 0.60421188f, -0.59811429f),
    Quat(0f, -0.46817155f, -0.46817155f, 0.74942031f),
    Quat(0f, 0.33114723f, -0.55925531f, -0.75998356f),
    Quat(0f, -0.32904164f, -0.49443063f, 0.80453089f),
    Quat(0f, 0.6846349f, -0.71982234f, 0.11458994f),
    Quat(0f, -0.70414024f, -0.70414024f, -0.09150433f),
    Quat(0f, 0.43768504f, -0.88760533f, -0.14348723f),
    Quat(0f, 0.34545569f, -0.04181209f, 0.93750313f),
    Quat(0f, -0.61527544f, -0.61527544f, 0.49282073f),
    Quat(0f, 0.66778707f, 0.74300947f, 0.04469172f),
    Quat(0f, -0.85083235f, -0.35726834f, -0.38528385f),
    Quat(0f, -0.76063804f, 0.0363121f, -0.64815986f),
    Quat(0f, -0.27381442f, -0.27381442f, -0.92198228f),
    Quat(0f, 0.78846196f, -0.34010251f, -0.51250173f),
    Quat(0f, -0.56355892f, -0.3316396f, 0.75658214f),
    Quat(0f, -0.62312381f, 0.77194372f, -0.125776f),
    Quat(0f, -0.67220147f, -0.67220147f, -0.3103069f),
    Quat(0f, -0.58084448f, 0.50737094f, -0.63654883f),
    Quat(0f, -0.6368507f, 0.72330505f, 0.2669288f),
    Quat(0f, 0.8207611f, -0.43464234f, 0.3707253f),
    Quat(0f, -0.46300117f, -0.46300117f, -0.75581733f),
    Quat(0f, -0.23192043f, -0.0660896f, 0.97048703f),
    Quat(0f, 0.70650621f, 0.70650621f, 0.04120608f),
    Quat(0f, 0.65806433f, 0.65806433f, -0.36592714f),
    Quat(0f, -0.88578156f, 0.27243753f, 0.37572439f),
    Quat(0f, 0.61286774f, -0.49309648f, 0.61745364f),
    Quat(0f, -0.60321581f, 0.38237123f, 0.69994494f),
    Quat(0f, 0.79371893f, -0.59555425f, 0.12379578f),
    Quat(0f, -0.28369318f, 0.40414268f, 0.86959006f),
    Quat(0f, 0.29608929f, -0.95063796f, 0.0928364f),
    Quat(0f, 0.98046686f, -0.18207895f, 0.07437735f),
    Quat(0f, -0.6892616f, -0.6892616f, 0.22324179f),
    Quat(0f, 0.13906282f, 0.13906282f, 0.98047084f),
    Quat(0f, 0.75073895f, -0.65377039f, -0.0947381f),
    Quat(0f, -0.17364943f, -0.97893649f, -0.10737422f),
    Quat(0f, -0.03997844f, -0.66356197f, -0.74705236f),
    Quat(0f, -0.09236128f, -0.09236128f, 0.99143269f),
    Quat(0f, -0.70181698f, -0.17899314f, -0.689503f),
    Quat(0f, 0.94498289f, 0.27739682f, -0.17337341f),
    Quat(0f, 0.02779547f, 0.99957227f, -0.00909385f),
    Quat(0f, -0.55479995f, -0.55479995f, 0.61999519f),
    Quat(0f, -0.00490026f, -0.00490026f, 0.99997599f),
    Quat(0f, 0.77815949f, -0.08404049f, -0.62241868f),
    Quat(0f, -0.56936223f, -0.56936223f, 0.59300362f),
    Quat(0f, -0.03164662f, -0.03164662f, 0.99899799f),
    Quat(0f, -0.72718333f, 0.20160709f, -0.65616994f),
    Quat(0f, 0.98911302f, 0.14705249f, 0.00556764f),
    Quat(0f, -0.03195217f, -0.84344988f, 0.5362568f),
    Quat(0f, 0.00885091f, 0.00885091f, 0.99992166f),
    Quat(0f, 0.33708573f, -0.83119098f, -0.4421479f),
    Quat(0f, -0.38836279f, -0.65278675f, -0.65041818f),
    Quat(0f, 0.74367931f, -0.66853228f, 0.00238053f),
    Quat(0f, -0.64178894f, 0.45693f, -0.61589117f),
    Quat(0f, -0.02457605f, 0.84128324f, 0.54003568f),
    Quat(0f, 0.29273435f, 0.9561539f, 0.00873623f),
    Quat(0f, -0.69013934f, -0.69013934f, -0.21775074f),
    Quat(0f, 0.84920329f, -0.52331308f, -0.0706908f),
    Quat(0f, 0.42180581f, 0.86835255f, 0.26085189f),
    Quat(0f, 0.49181981f, -0.44828539f, -0.74642715f),
    Quat(0f, -0.30436909f, 0.76209627f, 0.57146193f),
    Quat(0f, 0.6916997f, 0.6916997f, -0.20761277f),
    Quat(0f, -0.99957445f, 0.02787378f, 0.00860111f),
    Quat(0f, -0.04666749f, -0.69779129f, -0.71477931f),
    Quat(0f, -0.5552418f, -0.5552418f, -0.61920359f),
    Quat(0f, -0.12926832f, 0.72298882f, -0.67865813f),
    Quat(0f, -0.48178272f, 0.83223982f, 0.27433974f),
    Quat(0f, -0.47644434f, 0.3729806f, 0.79616974f),
    Quat(0f, -0.60134636f, -0.60134636f, -0.5260847f),
    Quat(0f, -0.36554906f, 0.515838f, 0.77478064f),
    Quat(0f, 0.29071655f, 0.29071655f, -0.91157434f),
    Quat(0f, -0.40734307f, 0.49586632f, 0.7669343f),
    Quat(0f, -0.00699487f, -0.00699487f, 0.99995107f),
    Quat(0f, -0.55151825f, 0.09040068f, -0.82924986f),
    Quat(0f, 0.48564211f, 0.82652157f, -0.2846293f),
    Quat(0f, 0.54232653f, 0.54232653f, 0.6416883f)
)


val chyba = 0.0001f
fun Quat.isOk() : Boolean =
    Math.abs(Math.abs(a)-1) < chyba &&
            Math.abs(b) < chyba &&
            Math.abs(c) < chyba &&
            Math.abs(d) < chyba

fun Quat.mult(x : Quat) : Quat =
    Quat(
        a*x.a - b*x.b - c*x.c - d*x.d,
        a*x.b + b*x.a + c*x.d - d*x.c,
        a*x.c - b*x.d + c*x.a + d*x.b,
        a*x.d + b*x.c - c*x.b + d*x.a
    )

fun main() {
    // α × γ × η = [-1, 0, 0, 0] a tiež β × ε × ζ = [1, 0, 0, 0],
    //println(alpha.mult(gamma))
    println(alpha.mult(gamma).mult(eta).isOk())
    println(beta.mult(epsilon).mult(theta).isOk())
    var lines = 0
    val alls = (0..99).toMutableList()
    for(i1 in 0..99) {
        for (i2 in i1 + 1..99) {
            for (i3 in i2 + 1..99) {
                if (quats[i1].mult(quats[i2]).mult(quats[i3]).isOk()) {
                    println("$i1, $i2, $i3")
                    lines++
                    alls.remove(i1)
                    alls.remove(i2)
                    alls.remove(i3)
                }
            }
        }
    }
    println(alls)
}
